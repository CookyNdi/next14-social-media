// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum PostStatus {
  POSTED
  SCHEDULED
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  username              String?                @unique
  email                 String                 @unique
  bio                   String?                @db.VarChar(300)
  banner_image          String?                @db.Text
  image                 String?                @db.Text
  role                  UserRole               @default(USER)
  emailVerified         DateTime?
  isTwoFactorEnabled    Boolean                @default(false)
  twofactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Posts                 Posts[]
  Comments              Comments[]
  Bookmarks             Bookmarks[]
  FollowerMutuals       Mutuals[]              @relation("Follower")
  FollowingMutuals      Mutuals[]              @relation("Following")
  Liked                 Liked[]
  Account               Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Mutuals {
  id          String   @id @default(cuid())
  follower    String
  following   String
  createdAt   DateTime @default(now())
  followerId  User     @relation(name: "Follower", fields: [follower], references: [id], onDelete: Cascade)
  followingId User     @relation(name: "Following", fields: [following], references: [id], onDelete: Cascade)
}

model Posts {
  id            String      @id @default(cuid())
  userId        String
  content       String      @db.VarChar(300)
  likes         Int         @default(0)
  type          String      @default("media")
  respost_count Int         @default(0)
  view          Int         @default(0)
  status        PostStatus
  scheduled     DateTime?
  is_repost     Boolean     @default(false)
  repost_id     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comments      Comments[]
  PostImage     PostImage[]
  Hastags       Hastags[]
  Bookmarks     Bookmarks[]
  Liked         Liked[]
}

model Liked {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Comments {
  id             String      @id @default(cuid())
  userId         String
  postId         String
  comment        String      @db.Char(300)
  like           Int         @default(0)
  view           Int         @default(0)
  parent_comment String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post           Posts       @relation(fields: [postId], references: [id], onDelete: Cascade)
  Bookmarks      Bookmarks[]
}

model PostImage {
  id        String   @id @default(cuid())
  postId    String
  image_url String
  createdAt DateTime @default(now())
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Hastags {
  id        String   @id @default(cuid())
  postId    String
  tag       String
  tag_count Int      @default(0)
  createdAt DateTime @default(now())
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Bookmarks {
  id        String    @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Posts?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comments? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
